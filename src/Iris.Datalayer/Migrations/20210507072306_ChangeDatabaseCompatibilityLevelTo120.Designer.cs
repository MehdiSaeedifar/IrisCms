// <auto-generated />
using System;
using Iris.Datalayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Iris.Datalayer.Migrations
{
    [DbContext(typeof(IrisDbContext))]
    [Migration("20210507072306_ChangeDatabaseCompatibilityLevelTo120")]
    partial class ChangeDatabaseCompatibilityLevelTo120
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Iris.DomainClasses.Entities.AnonymousUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IP")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("IP");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("AnonymousUsers");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("Category_Id");

                    b.Property<bool>("CommentStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int?>("EditedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("EditedByUser_Id");

                    b.Property<string>("Keyword")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.Property<int>("VisitedCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CategoryId" }, "IX_Category_Id");

                    b.HasIndex(new[] { "EditedByUserId" }, "IX_EditedByUser_Id");

                    b.HasIndex(new[] { "UserId" }, "IX_User_Id");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Author")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("ISBN");

                    b.Property<string>("Language")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Page")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Publisher")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Year")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "IX_Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.BookImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("Book_Id");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Path")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UploadedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.HasIndex(new[] { "BookId" }, "IX_Book_Id");

                    b.ToTable("BookImages");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("AnonymousUserId")
                        .HasColumnType("int")
                        .HasColumnName("AnonymousUser_Id");

                    b.Property<int?>("ArticleId")
                        .HasColumnType("int")
                        .HasColumnName("Article_Id");

                    b.Property<string>("Body")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<int?>("PageId")
                        .HasColumnType("int")
                        .HasColumnName("Page_Id");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("Post_Id");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AnonymousUserId" }, "IX_AnonymousUser_Id");

                    b.HasIndex(new[] { "ArticleId" }, "IX_Article_Id");

                    b.HasIndex(new[] { "PageId" }, "IX_Page_Id");

                    b.HasIndex(new[] { "ParentId" }, "IX_ParentId");

                    b.HasIndex(new[] { "PostId" }, "IX_Post_Id");

                    b.HasIndex(new[] { "UserId" }, "IX_User_Id")
                        .HasDatabaseName("IX_User_Id1");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.DownloadLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileFormat")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FileSize")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Link")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("Post_Id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PostId" }, "IX_Post_Id")
                        .HasDatabaseName("IX_Post_Id1");

                    b.ToTable("DownloadLinks");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.ForgottenPassword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("ResetDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_User_Id")
                        .HasDatabaseName("IX_User_Id2");

                    b.ToTable("ForgottenPasswords");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.Label", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Labels");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.LabelPost", b =>
                {
                    b.Property<int>("LabelId")
                        .HasColumnType("int")
                        .HasColumnName("Label_Id");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("Post_Id");

                    b.HasKey("LabelId", "PostId")
                        .HasName("PK_dbo.LabelPosts");

                    b.HasIndex(new[] { "LabelId" }, "IX_Label_Id");

                    b.HasIndex(new[] { "PostId" }, "IX_Post_Id")
                        .HasDatabaseName("IX_Post_Id2");

                    b.ToTable("LabelPosts");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.LikeUsersArticle", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ArticleId", "UserId")
                        .HasName("PK_dbo.LikeUsersArticles");

                    b.HasIndex(new[] { "ArticleId" }, "IX_ArticleId");

                    b.HasIndex(new[] { "UserId" }, "IX_UserId");

                    b.ToTable("LikeUsersArticles");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.LikeUsersComment", b =>
                {
                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommentId", "UserId")
                        .HasName("PK_dbo.LikeUsersComments");

                    b.HasIndex(new[] { "CommentId" }, "IX_CommentId");

                    b.HasIndex(new[] { "UserId" }, "IX_UserId")
                        .HasDatabaseName("IX_UserId1");

                    b.ToTable("LikeUsersComments");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.LikeUsersPage", b =>
                {
                    b.Property<int>("PageId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PageId", "UserId")
                        .HasName("PK_dbo.LikeUsersPages");

                    b.HasIndex(new[] { "PageId" }, "IX_PageId");

                    b.HasIndex(new[] { "UserId" }, "IX_UserId")
                        .HasDatabaseName("IX_UserId2");

                    b.ToTable("LikeUsersPages");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.LikeUsersPost", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PostId", "UserId")
                        .HasName("PK_dbo.LikeUsersPosts");

                    b.HasIndex(new[] { "PostId" }, "IX_PostId");

                    b.HasIndex(new[] { "UserId" }, "IX_UserId")
                        .HasDatabaseName("IX_UserId3");

                    b.ToTable("LikeUsersPosts");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAnswared")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_User_Id")
                        .HasDatabaseName("IX_User_Id3");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.MessageAnsware", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AnswaredDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MessageId")
                        .HasColumnType("int")
                        .HasColumnName("Message_Id");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MessageId" }, "IX_Message_Id");

                    b.HasIndex(new[] { "UserId" }, "IX_User_Id")
                        .HasDatabaseName("IX_User_Id4");

                    b.ToTable("MessageAnswares");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CommentStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int?>("EditedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("EditedByUser_Id");

                    b.Property<string>("Keyword")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.Property<int>("VisitedCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EditedByUserId" }, "IX_EditedByUser_Id")
                        .HasDatabaseName("IX_EditedByUser_Id1");

                    b.HasIndex(new[] { "ParentId" }, "IX_ParentId")
                        .HasDatabaseName("IX_ParentId1");

                    b.HasIndex(new[] { "UserId" }, "IX_User_Id")
                        .HasDatabaseName("IX_User_Id5");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("CommentStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int?>("EditedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("EditedByUser_Id");

                    b.Property<string>("Keyword")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Like")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.Property<int>("VisitedNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EditedByUserId" }, "IX_EditedByUser_Id")
                        .HasDatabaseName("IX_EditedByUser_Id2");

                    b.HasIndex(new[] { "UserId" }, "IX_User_Id")
                        .HasDatabaseName("IX_User_Id6");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BanedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("IP");

                    b.Property<bool>("IsBaned")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastActivity")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastPasswordChange")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("Role_Id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_Role_Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.UserMetaData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AvatarPath")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Major")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "IX_User_Id")
                        .HasDatabaseName("IX_User_Id7");

                    b.ToTable("UserMetaDatas");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.Article", b =>
                {
                    b.HasOne("Iris.DomainClasses.Entities.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_dbo.Articles_dbo.Categories_Category_Id");

                    b.HasOne("Iris.DomainClasses.Entities.User", "EditedByUser")
                        .WithMany("ArticleEditedByUsers")
                        .HasForeignKey("EditedByUserId")
                        .HasConstraintName("FK_dbo.Articles_dbo.Users_EditedByUser_Id");

                    b.HasOne("Iris.DomainClasses.Entities.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.Articles_dbo.Users_User_Id");

                    b.Navigation("Category");

                    b.Navigation("EditedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.Book", b =>
                {
                    b.HasOne("Iris.DomainClasses.Entities.Post", "Post")
                        .WithOne("Book")
                        .HasForeignKey("Iris.DomainClasses.Entities.Book", "Id")
                        .HasConstraintName("FK_dbo.Books_dbo.Posts_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.BookImage", b =>
                {
                    b.HasOne("Iris.DomainClasses.Entities.Book", "Book")
                        .WithOne("Image")
                        .HasForeignKey("Iris.DomainClasses.Entities.BookImage", "BookId")
                        .HasConstraintName("FK_dbo.BookImages_dbo.Books_Book_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.Comment", b =>
                {
                    b.HasOne("Iris.DomainClasses.Entities.AnonymousUser", "AnonymousUser")
                        .WithMany("Comments")
                        .HasForeignKey("AnonymousUserId")
                        .HasConstraintName("FK_dbo.Comments_dbo.AnonymousUsers_AnonymousUser_Id");

                    b.HasOne("Iris.DomainClasses.Entities.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .HasConstraintName("FK_dbo.Comments_dbo.Articles_Article_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Iris.DomainClasses.Entities.Page", "Page")
                        .WithMany("Comments")
                        .HasForeignKey("PageId")
                        .HasConstraintName("FK_dbo.Comments_dbo.Pages_Page_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Iris.DomainClasses.Entities.Comment", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_dbo.Comments_dbo.Comments_ParentId");

                    b.HasOne("Iris.DomainClasses.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_dbo.Comments_dbo.Posts_Post_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Iris.DomainClasses.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.Comments_dbo.Users_User_Id");

                    b.Navigation("AnonymousUser");

                    b.Navigation("Article");

                    b.Navigation("Page");

                    b.Navigation("Parent");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.DownloadLink", b =>
                {
                    b.HasOne("Iris.DomainClasses.Entities.Post", "Post")
                        .WithMany("DownloadLinks")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_dbo.DownloadLinks_dbo.Posts_Post_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.ForgottenPassword", b =>
                {
                    b.HasOne("Iris.DomainClasses.Entities.User", "User")
                        .WithMany("ForgottenPasswords")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.ForgottenPasswords_dbo.Users_User_Id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.LabelPost", b =>
                {
                    b.HasOne("Iris.DomainClasses.Entities.Label", "Label")
                        .WithMany("Posts")
                        .HasForeignKey("LabelId")
                        .HasConstraintName("FK_dbo.LabelPosts_dbo.Labels_Label_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iris.DomainClasses.Entities.Post", "Post")
                        .WithMany("Labels")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_dbo.LabelPosts_dbo.Posts_Post_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Label");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.LikeUsersArticle", b =>
                {
                    b.HasOne("Iris.DomainClasses.Entities.Article", "Article")
                        .WithMany("LikedUsers")
                        .HasForeignKey("ArticleId")
                        .HasConstraintName("FK_dbo.LikeUsersArticles_dbo.Articles_ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iris.DomainClasses.Entities.User", "User")
                        .WithMany("LikeUsersArticles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.LikeUsersArticles_dbo.Users_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.LikeUsersComment", b =>
                {
                    b.HasOne("Iris.DomainClasses.Entities.Comment", "Comment")
                        .WithMany("LikedUsers")
                        .HasForeignKey("CommentId")
                        .HasConstraintName("FK_dbo.LikeUsersComments_dbo.Comments_CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iris.DomainClasses.Entities.User", "User")
                        .WithMany("LikeUsersComments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.LikeUsersComments_dbo.Users_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.LikeUsersPage", b =>
                {
                    b.HasOne("Iris.DomainClasses.Entities.Page", "Page")
                        .WithMany("LikedUsers")
                        .HasForeignKey("PageId")
                        .HasConstraintName("FK_dbo.LikeUsersPages_dbo.Pages_PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iris.DomainClasses.Entities.User", "User")
                        .WithMany("LikeUsersPages")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.LikeUsersPages_dbo.Users_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.LikeUsersPost", b =>
                {
                    b.HasOne("Iris.DomainClasses.Entities.Post", "Post")
                        .WithMany("LikedUsers")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_dbo.LikeUsersPosts_dbo.Posts_PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iris.DomainClasses.Entities.User", "User")
                        .WithMany("LikeUsersPosts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.LikeUsersPosts_dbo.Users_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.Message", b =>
                {
                    b.HasOne("Iris.DomainClasses.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.Messages_dbo.Users_User_Id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.MessageAnsware", b =>
                {
                    b.HasOne("Iris.DomainClasses.Entities.Message", "Message")
                        .WithMany("Answares")
                        .HasForeignKey("MessageId")
                        .HasConstraintName("FK_dbo.MessageAnswares_dbo.Messages_Message_Id");

                    b.HasOne("Iris.DomainClasses.Entities.User", "User")
                        .WithMany("MessageAnswares")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.MessageAnswares_dbo.Users_User_Id");

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.Page", b =>
                {
                    b.HasOne("Iris.DomainClasses.Entities.User", "EditedByUser")
                        .WithMany("PageEditedByUsers")
                        .HasForeignKey("EditedByUserId")
                        .HasConstraintName("FK_dbo.Pages_dbo.Users_EditedByUser_Id");

                    b.HasOne("Iris.DomainClasses.Entities.Page", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_dbo.Pages_dbo.Pages_ParentId");

                    b.HasOne("Iris.DomainClasses.Entities.User", "User")
                        .WithMany("Pages")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.Pages_dbo.Users_User_Id");

                    b.Navigation("EditedByUser");

                    b.Navigation("Parent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.Post", b =>
                {
                    b.HasOne("Iris.DomainClasses.Entities.User", "EditedByUser")
                        .WithMany("PostEditedByUsers")
                        .HasForeignKey("EditedByUserId")
                        .HasConstraintName("FK_dbo.Posts_dbo.Users_EditedByUser_Id");

                    b.HasOne("Iris.DomainClasses.Entities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.Posts_dbo.Users_User_Id")
                        .IsRequired();

                    b.Navigation("EditedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.User", b =>
                {
                    b.HasOne("Iris.DomainClasses.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_dbo.Users_dbo.Roles_Role_Id");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.UserMetaData", b =>
                {
                    b.HasOne("Iris.DomainClasses.Entities.User", "User")
                        .WithOne("UserMetaData")
                        .HasForeignKey("Iris.DomainClasses.Entities.UserMetaData", "UserId")
                        .HasConstraintName("FK_dbo.UserMetaDatas_dbo.Users_User_Id")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.AnonymousUser", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.Article", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("LikedUsers");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.Book", b =>
                {
                    b.Navigation("Image");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.Category", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.Comment", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("LikedUsers");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.Label", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.Message", b =>
                {
                    b.Navigation("Answares");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.Page", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Comments");

                    b.Navigation("LikedUsers");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.Post", b =>
                {
                    b.Navigation("Book");

                    b.Navigation("Comments");

                    b.Navigation("DownloadLinks");

                    b.Navigation("Labels");

                    b.Navigation("LikedUsers");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Iris.DomainClasses.Entities.User", b =>
                {
                    b.Navigation("ArticleEditedByUsers");

                    b.Navigation("Articles");

                    b.Navigation("Comments");

                    b.Navigation("ForgottenPasswords");

                    b.Navigation("LikeUsersArticles");

                    b.Navigation("LikeUsersComments");

                    b.Navigation("LikeUsersPages");

                    b.Navigation("LikeUsersPosts");

                    b.Navigation("MessageAnswares");

                    b.Navigation("Messages");

                    b.Navigation("PageEditedByUsers");

                    b.Navigation("Pages");

                    b.Navigation("PostEditedByUsers");

                    b.Navigation("Posts");

                    b.Navigation("UserMetaData");
                });
#pragma warning restore 612, 618
        }
    }
}
